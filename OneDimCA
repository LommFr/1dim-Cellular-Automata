import java.util.*;

// lets add some comments

public class OneDimCA {
	
	// the number of cells
	static int size;
	
	// the number of displayed generations
	static int iterations;
	
	//the number of the displayed rule
	static String rule;
	
	//enable/disable circular boundaries
	static boolean boundaries;
	
	static boolean randomStartState; 
	
	static int[][] result;
	
	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);
		
		//requesting size of automaton
		System.out.println("Please enter a integer "
				+ "representing the number of cells:");
		size = sc.nextInt();
		
		//requesting number of iterations
		System.out.println("Please enter a integer "
				+ "representing the number of iterations:");
		iterations = sc.nextInt();		
		
		//requesting the rule
		System.out.println("Please enter a integer "
				+ "between 0 and 255 to term your rule:");
		int r = sc.nextInt();
		//convert rule number to binary string
		rule = Integer.toBinaryString(r);
				
		//add leading zeros
		while(rule.length() < 8) {
			rule = "0" + rule;
		}
		
		//requesting circular boundaries
		System.out.println("Are circular boundaries required?"
				+ " Enter yes or no");
		String ans = sc.next();
		boundaries = (ans.equals("yes")) ? true : false;
		
		//requesting random start configuration
		System.out.println("Random start configuration required?"
				+ " Enter yes or no:");
		ans = sc.next();
		randomStartState = (ans.equals("yes")) ? true : false;
		
		//initialize the automaton
		initializeAutomaton();
		
		//calculate the automaton
		buildAutomaton();
		
		//print the automaton
		System.out.println(printAutomaton());
		
		sc.close();
		
	}
	
	static void initializeAutomaton() {
		
		result = new int[iterations+1][size];
		Random random = new Random();
		
		if(randomStartState) {
			for(int i = 0; i<size; i++) {
				result[0][i] = random.nextInt(2);
			} 
		} else {		
		
		result[0][size/2] = 1;
		
		}
	}
	
	//calculates the automaton for given values
	static int[][] buildAutomaton() {		
		
		for(int iteration = 1; iteration<=iterations; iteration++) {
			for(int cell=0; cell<size; cell++) {
				result[iteration][cell] = 
						calculate(iteration, cell);
			}
		}
		
		return result;
	}
	
	//converts automaton to String
	static String printAutomaton() {
		
		String s = "";
		
		for(int i = 0; i<result.length; i++) {		
			
			
			for (int j=0; j<result[0].length; j++) {
				
				if(result[i][j] == 0) {
					s += "\u25A1";
				} else {
					s+= "\u25A0";
				}
				 
				if(j != result[0].length) {
					s += " ";
				}
			}
			
			if(i != result.length-1) {
				s += "\n";
			} 
		}
		
		return s;
	}
	
	//update the cell c of the i-th iteration
	static int calculate(int i, int c) {
		
		// two indices needed for circular boundaries
		int leftIndex = (c == 0) ? size-1 : c-1;		
		int rightIndex = (c == size-1) ? 0 : c+1;
		
		// if there are no circular boundaries, every cell
		//next to the left or right border stays zero		
		if(boundaries == false) {
			if(c == 0 || c == result[0].length-1) {
				return 0;
			}
		}
		
		// if there are circular boundaries we might mind 
		//the boarder cells 
		
		// get the actual tree-cell-neighbourhood
		String s = String.valueOf(result[i-1][leftIndex]);
		s += String.valueOf(result[i-1][c]);
		s += String.valueOf(result[i-1][rightIndex]);
		
		//apply given rule
		int index = Integer.valueOf(s, 2);
		if(rule.charAt(7-index) == '1') {
			return 1;
		}
		
		return 0;
	}
}
